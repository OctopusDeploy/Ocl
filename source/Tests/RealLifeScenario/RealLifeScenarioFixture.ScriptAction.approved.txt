description = ""
name = "My Runbook"

connectivity_policy {
    allow_deployments_to_no_targets = true
}

project_id = "Projects-1"

steps "Backup the Database" {
    actions "Backup the Database" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $backupResult = $OctopusParameters["Octopus.Action[Backup Octofront Prod SQL Database].Output.backupResult"]
                
                
                $TableSAName = 'infrascoreprodaccount'
                $TableName = 'results'
                $partitionKey = "OctofrontSQL"
                
                $data = @{
                  RowKey = ([guid]::NewGuid().tostring())
                  PartitionKey = $partitionKey
                  state = $backupResult 
                  description = "Octofront SQL Backup weekly"
                  dtDate = [datetime]::UtcNow
                }
                New-AzureTableEntity -StorageAccountName $TableSAName `
                                     -StorageAccountAccessKey $TableStorageKey `
                                     -TableName $TableName `
                                     -Entities $data        
                
                $querystring = "(PartitionKey eq '$partitionKey')"
                $tableWrite = Get-AzureTableEntity -TableName $TableName `
                                                 -StorageAccountName $TableSAName `
                                                 -StorageAccountAccessKey $TableStorageKey  `
                                                 -QueryString $querystring `
                                                 -ConvertDateTimeFields $true `
                                                 -GetAll $false 
                
                $ordered = $tableWrite | Sort-Object -Descending -Property Timestamp 
                $entryResult = $ordered[0] | Sort-Object -Descending -Property Timestamp | Select-Object description, state
                
                write-output $entryResult | ft
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
    }
}